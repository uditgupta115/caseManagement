# Generated by Django 2.2.3 on 2019-07-11 03:46

import casemanagement.casesystem.managers
from django.conf import settings
import django.core.management.utils
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('middle_name', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('last_name', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('email', models.EmailField(blank=True, max_length=256, null=True)),
                ('username', models.CharField(max_length=256, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('token_secret_key', models.CharField(default=django.core.management.utils.get_random_secret_key, max_length=128, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', casemanagement.casesystem.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_name', models.CharField(blank=True, max_length=512, null=True)),
                ('case_status', models.PositiveSmallIntegerField(blank=True, choices=[(None, 'Please select status'), (1, 'Open'), (2, 'Resolved'), (3, 'Reopened'), (4, 'Closed')], null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(None, 'Please select role'), (1, 'Manager'), (2, 'Task Manager')], null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(blank=True, max_length=256, null=True)),
                ('task_status', models.PositiveSmallIntegerField(blank=True, choices=[(None, 'Please select status'), (1, 'Open'), (2, 'Resolved'), (3, 'Reopened'), (4, 'Closed')], null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='casesystem.Case')),
                ('role', models.ForeignKey(default=None, on_delete=django.db.models.deletion.DO_NOTHING, to='casesystem.UserRole')),
            ],
        ),
        migrations.AddField(
            model_name='case',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='casesystem.UserRole'),
        ),
    ]
